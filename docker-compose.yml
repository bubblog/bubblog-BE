version: "3.8"

services:
  redis:
    image: redis:latest
    container_name: redis
    restart: always
    volumes:
      - redis_data:/data

  spring:
    image: mdy3722/bubblog-springboot:latest
    container_name: bubblog
    restart: always
    depends_on:
      - redis
      - kafka
    ports:
      - "8080:8080"
    env_file:
      - .env

  # 직접 Kafka 설치하지 않고 Docker를 이용해 컨테이너 환경으로 실행
  kafka:
    image: 'bitnami/kafka:latest'
    container_name: kafka
    restart: always
    ports:
      - "9092:9092"
    environment:
      - KAFKA_CFG_NODE_ID=1
      - KAFKA_CFG_PROCESS_ROLES=broker,controller
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT
      # Docker 내부 통신용 리스너와 외부 접속용 리스너를 함께 설정
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092,PLAINTEXT_EXTERNAL://${KAFKA_HOST_IP}:9092
      - KAFKA_CFG_INTER_BROKER_LISTENER_NAME=PLAINTEXT
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=1@kafka:9093
      - KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE=true
    volumes:
      - kafka_data:/bitnami/kafka

volumes:
  redis_data:
  kafka_data: